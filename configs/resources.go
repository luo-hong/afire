// Code generated by go-bindata. (@generated) DO NOT EDIT.

// Package configs generated by go-bindata.
// sources:
// configs/resources.xml
// configs/empty-json-example.json
package configs

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _configsResourcesXml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x94\xcd\x6a\xdb\x40\x10\xc7\xef\x85\xbe\x83\x7a\x35\x38\xfb\x02\x42\xa7\x94\x92\x43\x69\xe9\xc7\x03\x08\x7b\xdb\x18\x2c\xab\xac\xa4\x42\x6f\x86\xa4\x26\x06\x39\x71\xdb\x84\x18\xe1\x12\x0c\x11\x09\x29\x68\xed\xb4\xa5\xaa\x2d\x35\x2f\xb3\x5f\x3e\xe9\x15\x4a\xbc\x26\x59\xdb\x52\xe2\x43\x6e\xde\x99\xf1\xec\xff\x37\xf3\xd7\xea\xaf\xa0\x63\x7b\xa8\x02\x8d\xc7\x8f\x34\x4d\xd3\xf4\x27\xe5\xb2\xfc\xa5\x51\xfc\x97\x8c\xf7\xe9\x69\x40\xe2\x0b\x12\x37\xf9\xf8\x4c\x1c\xf4\x69\xe7\x68\x7a\xfc\x4b\x23\xe9\x15\x3f\x3c\x27\xe3\x16\xed\xfa\x24\x6e\x92\xf8\xc2\x43\xf5\x2c\xf1\x49\xda\x62\x3d\xbc\xb5\x49\xe2\x0e\xed\xfa\x3c\xd8\x65\x3b\x9f\x69\xeb\x77\x96\xf8\xb4\xbb\xcf\x7f\x60\xd6\xc3\xf2\xaf\x1e\xaa\xb3\xef\x21\x3b\x09\x59\xfb\x9f\x26\xce\xbe\x8a\xf6\xe5\xd6\x66\x96\xf8\xf3\xbb\x05\x0e\xf9\xe1\x39\xdb\xfb\xc3\xfa\x6d\x81\x43\x59\x40\x87\x23\xd6\xc3\x22\x3a\x25\xf1\x98\x1e\x60\x32\x09\x45\x74\x35\x3d\x8e\xb2\xc4\x67\x97\x03\xd6\x6f\xd3\xe1\x48\x66\x49\xdc\x11\x3b\xa9\xcc\xca\x8e\xe5\xb2\x02\xa8\xa9\x38\x59\x12\xb0\xbd\x2f\x3c\xd8\x55\x6a\xd0\xe2\x50\x66\xb1\x5a\xd5\xb0\x6a\x0d\xa8\x83\x5a\x55\x0d\x37\x4c\x0b\x1a\xb2\x81\x0e\x66\x07\x25\x69\x41\x77\xdb\xae\x1a\x2f\x5f\xbc\x7e\xa3\x83\xf9\x21\x27\xfd\x36\x37\x8b\x6c\xcf\x85\x06\xf8\x58\x02\x9e\x03\x11\x70\x60\xfd\x1d\x28\x95\x74\x20\xe3\x6a\xe1\xaa\x5a\x55\xf1\x46\xc5\xb6\x2c\xd8\x70\x97\x94\xdf\xaa\x9f\x36\x83\xeb\x61\x7f\xeb\x90\xb4\xbf\xc2\xa0\x0a\x7d\xf6\x34\x4f\xa8\x22\x36\x57\x1e\x58\xd2\xb7\x10\x28\x5e\x0a\x8d\x06\x22\x1a\xf0\xd1\x84\x47\x03\xde\x6d\xdd\xbf\x1d\xfb\x03\x44\xa6\x5b\xb0\xa0\x19\x9c\x88\x86\x34\x3d\x2a\x5c\x53\xe9\xee\x2d\xcc\xfb\xaf\xec\x60\x4d\x1e\xfe\x73\xc2\x27\x27\xeb\xc2\x38\x9f\x9c\xe7\x66\xc3\x7c\x9f\x8f\xa3\xf6\x5a\xc5\xb9\xc3\x0f\x37\x6d\x37\xae\x3d\x55\xe8\x08\xf9\xed\x15\xf4\xbf\x6f\x64\x79\xe6\xb5\x66\x97\xa2\x7c\xff\x2e\x1b\x64\x7d\x08\x64\xd7\x97\x07\x74\x0b\x21\x1f\x8d\x87\x81\xa8\x6c\x9b\xc8\xac\xb8\xeb\x12\x2c\x04\x74\x70\xf3\xc6\xfe\x0f\x00\x00\xff\xff\x68\x74\x0b\xe6\x6e\x05\x00\x00")

func configsResourcesXmlBytes() ([]byte, error) {
	return bindataRead(
		_configsResourcesXml,
		"configs/resources.xml",
	)
}

func configsResourcesXml() (*asset, error) {
	bytes, err := configsResourcesXmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "configs/resources.xml", size: 1390, mode: os.FileMode(438), modTime: time.Unix(1636620761, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configsEmptyJsonExampleJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func configsEmptyJsonExampleJsonBytes() ([]byte, error) {
	return bindataRead(
		_configsEmptyJsonExampleJson,
		"configs/empty-json-example.json",
	)
}

func configsEmptyJsonExampleJson() (*asset, error) {
	bytes, err := configsEmptyJsonExampleJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "configs/empty-json-example.json", size: 0, mode: os.FileMode(438), modTime: time.Unix(1637134294, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"configs/resources.xml":           configsResourcesXml,
	"configs/empty-json-example.json": configsEmptyJsonExampleJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("nonexistent") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"configs": &bintree{nil, map[string]*bintree{
		"empty-json-example.json": &bintree{configsEmptyJsonExampleJson, map[string]*bintree{}},
		"resources.xml":           &bintree{configsResourcesXml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
